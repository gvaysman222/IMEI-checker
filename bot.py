import json
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os

load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_AUTH_TOKEN = os.getenv('API_AUTH_TOKEN')

API_URL = "http://127.0.0.1:5000/api/check-imei"

WHITE_LIST_USERS = {6248416489}

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


def clean_text(text: str) -> str:
    if not text:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    text = text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    return text


@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    if user_id not in WHITE_LIST_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ IMEI, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


@dp.message()
async def check_imei(message: Message):
    user_id = message.from_user.id
    if user_id not in WHITE_LIST_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    imei = message.text.strip()
    if not (imei.isdigit() and len(imei) == 15):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 15 —Ü–∏—Ñ—Ä.")
        return

    headers = {"Content-Type": "application/json"}
    payload = {"imei": imei, "token": API_AUTH_TOKEN}

    try:
        response = requests.post(API_URL, json=payload, headers=headers)
        response.raise_for_status()
        data = response.json()
    except requests.exceptions.RequestException as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {clean_text(str(e))}")
        return
    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")
        return

    # print(json.dumps(data, indent=4, ensure_ascii=False))

    if "details" in data:
        try:
            details = json.loads(data["details"])
            if "properties" in details:
                device_info = details["properties"]
            else:
                await message.answer("–û—à–∏–±–∫–∞: –í `details` –Ω–µ—Ç `properties`.")
                return
        except json.JSONDecodeError:
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ `details` –≤ JSON.")
            return
    else:
        await message.answer("–û—à–∏–±–∫–∞: –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ—Ç `details`.")
        return

    device_name = clean_text(device_info.get("deviceName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    image_url = device_info.get("image", "")
    imei = clean_text(device_info.get("imei", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    imei2 = clean_text(device_info.get("imei2", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    serial = clean_text(device_info.get("serial", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    sim_lock = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if device_info.get("simLock") else "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    model_desc = clean_text(device_info.get("modelDesc", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    replacement = "‚ôªÔ∏è –ë—ã–ª –∑–∞–º–µ–Ω—ë–Ω" if device_info.get("replacement") else "‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ"
    demo_unit = "üõ† –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü" if device_info.get("demoUnit") else "üöÄ –û–±—ã—á–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü"
    apple_region = clean_text(device_info.get("apple/region", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    apple_model = clean_text(device_info.get("apple/modelName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    lost_mode = "‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø–∞–∂–∏!" if device_info.get("lostMode") else "‚úÖ –ù–µ —á–∏—Å–ª–∏—Ç—Å—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º"

    message_text = f"""üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>
üì± <b>–ú–æ–¥–µ–ª—å:</b> {device_name}
üì∑ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> <a href="{image_url}">–°—Å—ã–ª–∫–∞</a>
üìü <b>IMEI 1:</b> {imei}
üìü <b>IMEI 2:</b> {imei2}
üì¶ <b>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {serial}
üîÑ <b>SIM-Lock:</b> {sim_lock}
üìå <b>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:</b> {model_desc}
üîÅ <b>–ó–∞–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {replacement}
üéõ <b>–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {demo_unit}
üåç <b>–†–µ–≥–∏–æ–Ω Apple:</b> {apple_region}
üçè <b>–ú–æ–¥–µ–ª—å Apple:</b> {apple_model}
üîé <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–ø–∞–∂–∏:</b> {lost_mode}
"""

    await message.answer(message_text, parse_mode="HTML", disable_web_page_preview=False)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
